---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app prowlarr
spec:
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph
    - name: volsync
      namespace: volsync
  install:
    createNamespace: true
    remediation:
      retries: 3
  interval: 30m
  maxHistory: 2
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    env:
      PROWLARR__INSTANCE_NAME: Prowlarr
      PROWLARR__LOG_LEVEL: info
      PROWLARR__PORT: &port 9696
      TZ: "${CLUSTER_TIME_ZONE}"
    envFrom:
      - secretRef:
          name: prowlarr-secrets
    image:
      repository: ghcr.io/onedr0p/prowlarr-nightly
      tag: 1.7.3.3754@sha256:2cc1b8eba2f8e1e70c1130264bdaa1c4a9cc3aeb6e6ac75abd955e7bda50ead7
    ingress:
      main:
        annotations:
          hajimari.io/group: Media-Automation
          hajimari.io/icon: mdi:movie-search
          hajimari.io/info: Indexer Manager
        enabled: true
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        ingressClassName: nginx
        tls:
          - hosts:
              - *host
    nodeSelector:
      node-role.kubernetes.io/worker: "true"
    persistence:
      backup:
        enabled: true
        mountPath: /config/Backups
        path: "${NAS_NFS_PATH}/backup/app/prowlarr"
        server: "${NAS_ADDRESS}"
        type: nfs
      config:
        enabled: true
        existingClaim: prowlarr-config-v1
    podAnnotations:
      secret.reloader.stakater.com/reload: prowlarr-secrets
    podSecurityContext:
      fsGroup: 568
      fsGroupChangePolicy: OnRootMismatch
      runAsGroup: 568
      runAsUser: 568
    probes:
      liveness: &probes
        enabled: true
        custom: true
        spec:
          httpGet:
            path: /ping
            port: *port
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      readiness: *probes
      startup:
        enabled: false
    service:
      main:
        ports:
          http:
            port: *port
