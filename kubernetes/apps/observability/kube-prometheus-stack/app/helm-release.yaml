---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app kube-prometheus-stack
spec:
  chart:
    spec:
      chart: *app
      version: 48.3.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  dependsOn:
    - name: local-path-provisioner
      namespace: kube-system
    - name: rook-ceph-cluster
      namespace: rook-ceph
    - name: thanos
      namespace: observability
  install:
    remediation:
      retries: 3
  interval: 30m
  maxHistory: 2
  timeout: 15m
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    alertmanager:
      alertmanagerSpec:
        replicas: 1 # 2
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 1Gi
              storageClassName: local-path
      config:
        global:
          resolve_timeout: 5m
          slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}/slack"
        inhibit_rules:
          - equal: ["alertname", "namespace"]
            source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
        receivers:
          - name: heartbeat
          - name: "null"
          - name: "discord"
            slack_configs:
              - channel: "#prometheus-alerts"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                send_resolved: true
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}

                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                username: "Prometheus"
        route:
          group_by: ["alertname", "job"]
          group_interval: 10m
          group_wait: 1m
          receiver: "discord"
          repeat_interval: 12h
          routes:
            - receiver: heartbeat
              group_interval: 5m
              group_wait: 0s
              matchers:
                - alertname =~ "Watchdog"
              repeat_interval: 5m
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor"
            - receiver: "discord"
              continue: true
              matchers:
                - severity = "critical"
      ingress:
        annotations:
          hajimari.io/appName: "Alert Manager"
          hajimari.io/group: Observability
          hajimari.io/icon: mdi:alert-decagram-outline
        enabled: true
        hosts:
          - &alertmanagerhost "alert-manager.${SECRET_DOMAIN}"
        ingressClassName: nginx
        pathType: Prefix
        tls:
          - hosts:
              - *alertmanagerhost
    cleanPrometheusOperatorObjectNames: true
    crds:
      enabled: true
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubeStateMetrics:
      enabled: false
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate labels provided by k3s
          - action: keep
            regex: (aggregator_openapi|aggregator_unavailable|apiextensions_openapi|apiserver_admission|apiserver_audit|apiserver_cache|apiserver_cel|apiserver_client|apiserver_crd|apiserver_current|apiserver_envelope|apiserver_flowcontrol|apiserver_init|apiserver_kube|apiserver_longrunning|apiserver_request|apiserver_requested|apiserver_response|apiserver_selfrequest|apiserver_storage|apiserver_terminated|apiserver_tls|apiserver_watch|apiserver_webhooks|authenticated_user|authentication|disabled_metric|etcd_bookmark|etcd_lease|etcd_request|field_validation|get_token|go|grpc_client|hidden_metric|kube_apiserver|kubernetes_build|kubernetes_feature|node_authorizer|pod_security|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|serviceaccount_legacy|serviceaccount_stale|serviceaccount_valid|watch_cache|workqueue)_(.+)
            sourceLabels: ["__name__"]
          # Drop high cardinality labels
          - action: drop
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            sourceLabels: ["__name__"]
          - action: drop
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            sourceLabels: ["__name__"]
    kubeControllerManager:
      enabled: true
      endpoints: &controlplane
        - "${K3S_NODE_1_ADDRESS}"
        - "${K3S_NODE_2_ADDRESS}"
        - "${K3S_NODE_3_ADDRESS}"
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate labels provided by k3s
          - action: keep
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|attachdetach_controller|authenticated_user|authentication|cronjob_controller|disabled_metric|endpoint_slice|ephemeral_volume|garbagecollector_controller|get_token|go|hidden_metric|job_controller|kubernetes_build|kubernetes_feature|leader_election|node_collector|node_ipam|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|pv_collector|registered_metric|replicaset_controller|rest_client|retroactive_storageclass|root_ca|running_managed|scrape_duration|scrape_samples|scrape_series|service_controller|storage_count|storage_operation|ttl_after|volume_operation|workqueue)_(.+)"
            sourceLabels: ["__name__"]
    kubeEtcd:
      enabled: true
      endpoints: *controlplane
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: true
      endpoints: *controlplane
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate labels provided by k3s
          - action: keep
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authenticated_user|authentication|disabled_metric|go|hidden_metric|kubernetes_build|kubernetes_feature|leader_election|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scheduler|scrape_duration|scrape_samples|scrape_series|workqueue)_(.+)"
            sourceLabels: ["__name__"]
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate labels provided by k3s
          - action: keep
            regex: (apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authentication_token|cadvisor_version|container_blkio|container_cpu|container_fs|container_last|container_memory|container_network|container_oom|container_processes|container|csi_operations|disabled_metric|get_token|go|hidden_metric|kubelet_certificate|kubelet_cgroup|kubelet_container|kubelet_containers|kubelet_cpu|kubelet_device|kubelet_graceful|kubelet_http|kubelet_lifecycle|kubelet_managed|kubelet_node|kubelet_pleg|kubelet_pod|kubelet_run|kubelet_running|kubelet_runtime|kubelet_server|kubelet_started|kubelet_volume|kubernetes_build|kubernetes_feature|machine_cpu|machine_memory|machine_nvm|machine_scrape|node_namespace|plugin_manager|prober_probe|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|storage_operation|volume_manager|volume_operation|workqueue)_(.+)
            sourceLabels: ["__name__"]
          - action: replace
            sourceLabels: ["node"]
            targetLabel: instance
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
            sourceLabels: ["__name__"]
    nodeExporter:
      enabled: false
    prometheus:
      ingress:
        annotations:
          hajimari.io/appName: Prometheus
          hajimari.io/group: Observability
          hajimari.io/icon: simple-icons:prometheus
        enabled: true
        hosts:
          - &promhost "prometheus.${SECRET_DOMAIN}"
        ingressClassName: nginx
        pathType: Prefix
        tls:
          - hosts:
              - *promhost
      prometheusSpec:
        enableAdminAPI: true
        enableFeatures:
          - auto-gomaxprocs
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        replicas: 1 # 2
        replicaExternalLabelName: __replica__
        retention: 2d
        retentionSize: 15GB
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 20Gi
              storageClassName: local-path
        thanos:
          image: quay.io/thanos/thanos:v0.31.0
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml
        walCompression: true
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
