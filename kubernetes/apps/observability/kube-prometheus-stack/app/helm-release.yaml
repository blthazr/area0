---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app kube-prometheus-stack
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      version: 61.3.2
  dependsOn:
    - name: prometheus-operator-crds
      namespace: observability
    - name: rook-ceph-cluster
      namespace: rook-ceph
    - name: thanos
      namespace: observability
  install:
    crds: Skip
    remediation:
      retries: 3
  interval: 30m
  timeout: 15m
  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      retries: 3
      strategy: rollback
  values:
    alertmanager:
      alertmanagerSpec:
        replicas: 1
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 1Gi
              storageClassName: ceph-block
      config:
        global:
          resolve_timeout: 5m
        inhibit_rules:
          - equal:
              - alertname
              - namespace
            source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
        receivers:
          - name: "null"
          - name: discord
            slack_configs:
              - channel: "#prometheus-alerts"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                send_resolved: true
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  {{ if ne .Annotations.summary ""}}**Summary:** {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}**Message:** {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}**Description:** {{ .Annotations.description }}{{ end }}

                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
                username: "Prometheus"
        route:
          group_by:
            - alertname
            - job
          group_interval: 10m
          group_wait: 1m
          receiver: discord
          repeat_interval: 12h
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "Watchdog"
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor"
            - receiver: discord
              continue: true
              matchers:
                - severity = "critical"
      ingress:
        annotations:
          hajimari.io/appName: Alertmanager
          hajimari.io/group: Observability
          hajimari.io/icon: mdi:alert-decagram-outline
        enabled: true
        hosts:
          - "alertmanager.${SECRET_DOMAIN}"
        ingressClassName: internal
        pathType: Prefix
    cleanPrometheusOperatorObjectNames: true
    crds:
      enabled: false
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: System
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: drop
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            sourceLabels: ["__name__"]
          - action: drop
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            sourceLabels: ["__name__"]
    kubeControllerManager:
      enabled: true
      endpoints: &control-plane
        - 172.16.21.11
        - 172.16.21.12
        - 172.16.21.13
    kubeEtcd:
      enabled: true
      endpoints: *control-plane
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: true
      endpoints: *control-plane
    kubeStateMetrics:
      enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
            sourceLabels: ["__name__"]
    nodeExporter:
      enabled: true
    prometheus:
      ingress:
        annotations:
          hajimari.io/enable: "false"
        enabled: true
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        ingressClassName: internal
        pathType: Prefix
      prometheusSpec:
        enableAdminAPI: true
        enableFeatures:
          - auto-gomemlimit
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        podMetadata:
          annotations:
            secret.reloader.stakater.com/reload: &secret thanos-objstore-secret
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        replicaExternalLabelName: __replica__
        replicas: 1
        resources:
          limits:
            memory: 1500Mi
          requests:
            cpu: 100m
        retention: 2d
        retentionSize: 15GB
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        scrapeInterval: 1m # Must match interval in Grafana Helm chart
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 20Gi
              storageClassName: ceph-block
        thanos:
          image: quay.io/thanos/thanos:${THANOS_VERSION}
          objectStorageConfig:
            existingSecret:
              name: *secret
              key: objstore.yml
          version: ${THANOS_VERSION#v}
        walCompression: true
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
  valuesFrom:
    - name: kube-prometheus-stack-helm-values
      kind: Secret
      optional: false
