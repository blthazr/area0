---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  # Directories
  BOOTSTRAP_DIR: '{{.KUBERNETES_DIR}}/bootstrap'
  # Files
  BOOTSTRAP_HELMFILE: '{{.BOOTSTRAP_DIR}}/helmfile.yaml'
  BOOTSTRAP_OP_ENV_FILE: '{{.BOOTSTRAP_DIR}}/bootstrap.env'
  BOOTSTRAP_RESOURCES_FILE: '{{.BOOTSTRAP_DIR}}/templates/resources.yaml.j2'

includes:
  talos: ../talos

tasks:

  # task bootstrap:talos
  talos:
    desc: Bootstrap a Talos Kubernetes cluster
    prompt: "Bootstrap the Talos cluster ... continue?"
    vars:
      TALOS_CONTROLLER:
        sh: |
          talosctl --talosconfig {{.TALOSCONFIG_FILE}} config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    cmds:
      - task: :talos:generate-clusterconfig
      - task: :talos:apply-clusterconfig
        vars:
          INSECURE: "true"
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - task: talos:kubeconfig
    preconditions:
      - { msg: "jq not in $PATH", sh: "command -v jq" }
      - { msg: "shuf not in $PATH", sh: "command -v shuf" }
      - { msg: "talosctl not in $PATH", sh: "command -v talosctl" }
      - { msg: "Missing talosconfig file", sh: "test -f {{.TALOSCONFIG_FILE}}" }
      - { msg: "Missing Talos cluster configuration", sh: "talosctl config info >/dev/null 2>&1" }

  # task bootstrap:talos-apps
  talos-apps:
    desc: Bootstrap Talos apps
    prompt: "Bootstrap apps into the Talos cluster ... continue?"
    env:
      NODE_COUNT:
        sh: talosctl config info --output json | jq --raw-output '.nodes | length'
      ROOK_DISK: '{{.ROOK_DISK}}'
      VAULT: area0
    vars:
      ROOK_DISK: '{{.ROOK_DISK | default "ata-Samsung_Portable_SSD_T5"}}'
    cmds:
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - op run --env-file "{{.BOOTSTRAP_OP_ENV_FILE}}" --no-masking -- minijinja-cli "{{.BOOTSTRAP_RESOURCES_FILE}}" | kubectl apply --server-side --filename -
      - helmfile --file {{.BOOTSTRAP_HELMFILE}} --quiet apply --skip-diff-on-install --suppress-diff
      - helmfile --file {{.BOOTSTRAP_HELMFILE}} --quiet destroy --selector name=wipe-rook
    requires:
      vars:
        - ROOK_DISK
    preconditions:
      - { msg: "helmfile not in $PATH", sh: "command -v helmfile" }
      - { msg: "jq not in $PATH", sh: "command -v jq" }
      - { msg: "kubectl not in $PATH", sh: "command -v kubectl" }
      - { msg: "minijinja-cli not in $PATH", sh: "command -v minijinja-cli" }
      - { msg: "op not in $PATH", sh: "command -v op" }
      - { msg: "Missing bootstrap helmfile", sh: "test -f {{.BOOTSTRAP_HELMFILE}}" }
      - { msg: "Missing bootstrap resources file", sh: "test -f {{.BOOTSTRAP_RESOURCES_FILE}}" }
      - { msg: "Missing kubeconfig file", sh: "test -f {{.KUBECONFIG_FILE}}" }
      - { msg: "Missing op bootstrap file", sh: "test -f {{.BOOTSTRAP_OP_ENV_FILE}}" }
      - { msg: "Missing wipe-rook job file", sh: "test -f {{.BOOTSTRAP_DIR}}/templates/wipe-rook.yaml.gotmpl" }
      - { msg: "1password not signed in", sh: "op user get --me" }
