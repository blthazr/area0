---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  # task k8s:cleanup-pods
  cleanup-pods:
    desc: Cleanup pods with a Failed/Pending/Succeeded phase
    cmds:
      - for:
          matrix:
            PHASE: [Failed, Pending, Succeeded]
        cmd: kubectl delete pods --all-namespaces --field-selector status.phase={{.ITEM.PHASE}} --ignore-not-found=true
    preconditions:
      - { msg: "kubectl not in $PATH", sh: "command -v kubectl" }
      - { msg: "Missing kubeconfig file: {{.KUBECONFIG_FILE}}", sh: "test -f {{.KUBECONFIG_FILE}}" }

  # task k8s:new-app APP=<app_name> [NS=default] [TYPE=app-template]
  new-app:
    summary: |
      APP:  (str | required) Name of app to create
      NS:   (str)            Namespace of the app [default: default]
      TYPE: (str)            Type of app to create [app-template, helm-values, standard (default: app-template)]
    vars:
      APP_TYPE: '{{.TYPE | default "app-template"}}'
      NS: '{{.NS | default "default"}}'
    cmds:
      - task: 'new-{{.APP_TYPE}}-app'
    requires:
      vars:
        - APP

  # task k8s:new-app-template-app APP=<app_name> [NS=default]
  new-app-template-app:
    desc: Create a new app from app-template
    summary: |
      APP: (str | required) Name of app to create
      NS:  (str)            Namespace of the app [default: default]
    env:
      APP: "{{.APP}}"
      NS: "{{.NS}}"
    vars:
      NS: '{{.NS | default "default"}}'
      NS_PATH: '{{.KUBERNETES_DIR}}/apps/{{.NS}}'
      APP_PATH: '{{.NS_PATH}}/{{.APP}}'
    cmds:
      - mkdir -p {{.APP_PATH}}/app
      - minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/ks.yaml.j2 -o {{.APP_PATH}}/ks.yaml
      - for:
          matrix:
            FILES:
              - helm-release.yaml
              - kustomization.yaml
        cmd: minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/app-template/{{.ITEM.FILES}}.j2 -o {{.APP_PATH}}/app/{{.ITEM.FILES}}
      - for:
          matrix:
            FILES:
              - external-secret.yaml
              - persistent-volume-claim.yaml
        cmd: minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/extras/{{.ITEM.FILES}}.j2 -o {{.APP_PATH}}/app/{{.ITEM.FILES}}
    requires:
      vars:
        - APP
    preconditions:
      - { msg: "Kubernetes namespace `{{.NS}}` does not exist.", sh: "test -d {{.NS_PATH}}" }
      - { msg: "The app `{{.APP}}` already exists in namespace `{{.NS}}`.", sh: "! test -d {{.APP_PATH}}" }
      - { msg: "minijinja-cli not in $PATH", sh: "command -v minijinja-cli" }
      - { msg: "Missing minijinja config file: {{.MINIJINJA_CONFIG_FILE}}", sh: "test -f {{.MINIJINJA_CONFIG_FILE}}" }

  # task k8s:new-helm-values-app APP=<app_name> [NS=default]
  new-helm-values-app:
    desc: Create a new helm-values app
    summary: |
      APP: (str | required) Name of app to create
      NS:  (str)            Namespace of the app [default: default]
    env:
      APP: "{{.APP}}"
      NS: "{{.NS}}"
    vars:
      NS: '{{.NS | default "default"}}'
      NS_PATH: '{{.KUBERNETES_DIR}}/apps/{{.NS}}'
      APP_PATH: '{{.NS_PATH}}/{{.APP}}'
    cmds:
      - mkdir -p {{.APP_PATH}}/app
      - minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/ks.yaml.j2 -o {{.APP_PATH}}/ks.yaml
      - for:
          matrix:
            FILES:
              - helm-release.yaml
              - kustomization.yaml
        cmd: minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/helm-values/{{.ITEM.FILES}}.j2 -o {{.APP_PATH}}/app/{{.ITEM.FILES}}
      - for:
          matrix:
            FILES:
              - external-secret.yaml
              - helm-repository.yaml
              - persistent-volume-claim.yaml
              - oci-repository.yaml
        cmd: minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/extras/{{.ITEM.FILES}}.j2 -o {{.APP_PATH}}/app/{{.ITEM.FILES}}
      - mkdir -p {{.APP_PATH}}/app/helm
      - for:
          matrix:
            FILES:
              - kustomize-config.yaml
              - values.yaml
        cmd: minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/helm-values/helm/{{.ITEM.FILES}}.j2 -o {{.APP_PATH}}/app/helm/{{.ITEM.FILES}}
    requires:
      vars:
        - APP
    preconditions:
      - { msg: "Kubernetes namespace `{{.NS}}` does not exist.", sh: "test -d {{.NS_PATH}}" }
      - { msg: "The app `{{.APP}}` already exists in namespace `{{.NS}}`.", sh: "! test -d {{.APP_PATH}}" }
      - { msg: "minijinja-cli not in $PATH", sh: "command -v minijinja-cli" }
      - { msg: "Missing minijinja config file: {{.MINIJINJA_CONFIG_FILE}}", sh: "test -f {{.MINIJINJA_CONFIG_FILE}}" }

  # task k8s:new-standard-app APP=<app_name> [NS=default]
  new-standard-app:
    desc: Create a new standard app
    summary: |
      APP: (str | required) Name of app to create
      NS:  (str)            Namespace of the app [default: default]
    env:
      APP: "{{.APP}}"
      NS: "{{.NS}}"
    vars:
      NS: '{{.NS | default "default"}}'
      NS_PATH: '{{.KUBERNETES_DIR}}/apps/{{.NS}}'
      APP_PATH: '{{.NS_PATH}}/{{.APP}}'
    cmds:
      - mkdir -p {{.APP_PATH}}/app
      - minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/ks.yaml.j2 -o {{.APP_PATH}}/ks.yaml
      - for:
          matrix:
            FILES:
              - helm-release.yaml
              - kustomization.yaml
        cmd: minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/standard/{{.ITEM.FILES}}.j2 -o {{.APP_PATH}}/app/{{.ITEM.FILES}}
      - for:
          matrix:
            FILES:
              - external-secret.yaml
              - helm-repository.yaml
              - persistent-volume-claim.yaml
              - oci-repository.yaml
        cmd: minijinja-cli {{.KUBERNETES_DIR}}/templates/__APP_NAME/extras/{{.ITEM.FILES}}.j2 -o {{.APP_PATH}}/app/{{.ITEM.FILES}}
    requires:
      vars:
        - APP
    preconditions:
      - { msg: "Kubernetes namespace `{{.NS}}` does not exist.", sh: "test -d {{.NS_PATH}}" }
      - { msg: "The app `{{.APP}}` already exists in namespace `{{.NS}}`.", sh: "! test -d {{.APP_PATH}}" }
      - { msg: "minijinja-cli not in $PATH", sh: "command -v minijinja-cli" }
      - { msg: "Missing minijinja config file: {{.MINIJINJA_CONFIG_FILE}}", sh: "test -f {{.MINIJINJA_CONFIG_FILE}}" }
