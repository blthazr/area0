---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_DIR: "{{.INFRASTRUCTURE_DIR}}/talos"
  TALHELPER_CONFIG_FILE: "{{.TALOS_DIR}}/talconfig.yaml"
  TALHELPER_ENV_FILE: "{{.TALOS_DIR}}/talenv.sops.yaml"
  TALHELPER_SECRET_FILE: "{{.TALOS_DIR}}/talsecret.sops.yaml"
  TALOSCONFIG_DIR: "{{.TALOS_DIR}}/clusterconfig"
  TALOSCONFIG_FILE: "{{.TALOSCONFIG_DIR}}/talosconfig"

env:
  TALOSCONFIG: "{{.TALOSCONFIG_FILE}}"

tasks:

  # task talos:generate-clusterconfig
  generate-clusterconfig:
    desc: Generate the Talos configs
    dir: "{{.TALOS_DIR}}"
    cmds:
      - |
        talhelper genconfig \
        --config-file {{.TALHELPER_CONFIG_FILE}} \
        --env-file {{.TALHELPER_ENV_FILE}} \
        --out-dir {{.TALOSCONFIG_DIR}} \
        --secret-file {{.TALHELPER_SECRET_FILE}}
    preconditions:
      - { msg: "talhelper not in $PATH", sh: "which talhelper" }
      - { msg: "talosctl not in $PATH", sh: "which talosctl" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
      - { msg: "Missing talhelper env file", sh: "test -f {{.TALHELPER_ENV_FILE}}" }
      - { msg: "Missing talhelper secret file", sh: "test -f {{.TALHELPER_SECRET_FILE}}" }

  # task talos:diff-node node=<node name>
  diff-node:
    desc: Diff the Talos machineConfig on a node
    summary: |
      Args:
        node: (required)
    deps:
      - generate-clusterconfig
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: _apply-machineconfig
        vars:
          extra_flags: --dry-run
          node: "{{.node}}"
    requires:
      vars:
        - node

  # task talos:apply-machineconfig node=<node name>
  apply-machineconfig:
    desc: Apply the Talos machineConfig to a node
    summary: |
      Args:
        node: (required)
    deps:
      - generate-clusterconfig
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: _apply-machineconfig
        vars:
          extra_flags: "--mode reboot"
          node: "{{.node}}"
    requires:
      vars:
        - node

  # task talos:upgrade node=<node name>
  upgrade:
    desc: Upgrade Talos on a node
    summary: |
      Args:
        node: (required)
    deps:
      - generate-clusterconfig
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: _upgrade-talos
        vars:
          node: "{{.node}}"
    requires:
      vars:
        - node

  # task talos:rolling-upgrade
  rolling-upgrade:
    desc: Rolling Talos upgrade on all nodes in the cluster
    deps:
      - generate-clusterconfig
    dir: "{{.TALOS_DIR}}"
    cmds:
      - flux suspend kustomization --all
      - kubectl cnpg maintenance set --reusePVC --all-namespaces
      - for:
          var: nodes
        task: _upgrade-talos
        vars:
          node: "{{.ITEM}}"
          rollout: "true"
      - kubectl cnpg maintenance unset --reusePVC --all-namespaces
      - flux resume kustomization --all
      - task: :kubernetes:delete-failed-pods
    vars:
      nodes:
        sh: |
          yq '.nodes[] | .hostname' {{.TALHELPER_CONFIG_FILE}}
    preconditions:
      - { msg: "flux not in $PATH", sh: "which flux" }
      - { msg: "kubectl not in $PATH", sh: "which kubectl" }
      - { msg: "yq not in $PATH", sh: "which yq" }
      - { msg: "Missing kubectl cnpg plugin", sh: "kubectl cnpg" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  _apply-machineconfig:
    internal: true
    dir: "{{.TALOS_DIR}}"
    cmds:
      - |
        talhelper gencommand apply \
        --config-file {{.TALHELPER_CONFIG_FILE}} \
        --env-file {{.TALHELPER_ENV_FILE}} \
        {{ if .extra_flags }} --extra-flags="{{.extra_flags}}" {{ end }} \
        {{ if .node_ip_address }} --node {{.node_ip_address}} {{ end }} \
        --out-dir {{.TALOSCONFIG_DIR}} \
        | bash
    vars:
      node_ip_address:
        sh: |
          yq '.nodes[] | select(.hostname == "{{.node}}") | .ipAddress' {{.TALHELPER_CONFIG_FILE}}
    requires:
      vars:
        - node
    preconditions:
      - { msg: "talhelper not in $PATH", sh: "which talhelper" }
      - { msg: "talosctl not in $PATH", sh: "which talosctl" }
      - { msg: "yq not in $PATH", sh: "which yq" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
      - { msg: "Missing talhelper env file", sh: "test -f {{.TALHELPER_ENV_FILE}}" }
      - { msg: "IP Address for node {{.node}} not found in {{.TALHELPER_CONFIG_FILE}}", sh: "[ '{{.node_ip_address}}' != '<no value>' ] || [ -z '{{.node}}' ]" }

  _upgrade-talos:
    internal: true
    dir: "{{.TALOS_DIR}}"
    cmds:
      - bash {{.TASK_SCRIPTS_DIR}}/talos-upgrade.sh "{{.node}}" "{{.talos_image}}" "{{.rollout}}"
    vars:
      node_ip_address:
        sh: |
          yq '.nodes[] | select(.hostname == "{{.node}}") | .ipAddress' {{.TALHELPER_CONFIG_FILE}}
      rollout: '{{.rollout | default "false"}}'
      talos_image:
        sh: |
            talhelper genurl installer \
            --config-file {{.TALHELPER_CONFIG_FILE}} \
            --env-file {{.TALHELPER_ENV_FILE}} \
            | grep {{.node}} \
            | awk '{split($0,u," "); print u[2]}'
    requires:
      vars:
        - node
    preconditions:
      - { msg: "awk not in $PATH", sh: "which awk" }
      - { msg: "flux not in $PATH", sh: "which flux" }
      - { msg: "grep not in $PATH", sh: "which grep" }
      - { msg: "kubectl not in $PATH", sh: "which kubectl" }
      - { msg: "talhelper not in $PATH", sh: "which talhelper" }
      - { msg: "talosctl not in $PATH", sh: "which talosctl" }
      - { msg: "yq not in $PATH", sh: "which yq" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
      - { msg: "Missing talhelper env file", sh: "test -f {{.TALHELPER_ENV_FILE}}" }
      - { msg: "Missing talosctl config file", sh: "test -f {{.TALOSCONFIG_FILE}}" }
      - { msg: "Missing talos upgrade script file", sh: "test -f {{.TASK_SCRIPTS_DIR}}/talos-upgrade.sh" }
      - { msg: "IP Address for node {{.node}} not found in {{.TALHELPER_CONFIG_FILE}}", sh: "[ '{{.node_ip_address}}' != '<no value>' ] || [ -z '{{.node}}' ]" }
      - { msg: "Unable to find Talos image for node {{.node}}.", sh: "[[ ! -z {{.talos_image}} ]]" }
