---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  # Directories
  TALOS_DIR: '{{.INFRASTRUCTURE_DIR}}/talos'
  TALHELPER_CLUSTER_DIR: '{{.TALOS_DIR}}/clusterconfig'
  # Files
  TALHELPER_OP_ENV_FILE: '{{.TALOS_DIR}}/talhelper.env'
  TALOSCONFIG_FILE: '{{.TALHELPER_CLUSTER_DIR}}/talosconfig'
  TALHELPER_CONFIG_FILE: '{{.TALOS_DIR}}/talconfig.yaml'
  TALHELPER_ENV_FILE: '{{.TALOS_DIR}}/talenv.sops.yaml'
  TALHELPER_SECRET_FILE: '{{.TALOS_DIR}}/talsecret.yaml'

env:
  TALOSCONFIG: '{{.TALOSCONFIG_FILE}}'

tasks:

  # task talos:generate-clusterconfig
  generate-clusterconfig:
    desc: Generate Talos configuration
    env:
      VAULT: area0
    cmds:
      - op run --env-file {{.TALHELPER_OP_ENV_FILE}} --no-masking -- talhelper genconfig
          --config-file {{.TALHELPER_CONFIG_FILE}}
          --env-file {{.TALHELPER_ENV_FILE}}
          --out-dir {{.TALHELPER_CLUSTER_DIR}}
          --secret-file {{.TALHELPER_SECRET_FILE}}
    preconditions:
      - { msg: "op not in $PATH", sh: "command -v op" }
      - { msg: "sops not in $PATH", sh: "command -v sops" }
      - { msg: "talhelper not in $PATH", sh: "command -v talhelper" }
      - { msg: "talosctl not in $PATH", sh: "command -v talosctl" }
      - { msg: "Missing op talhelper file", sh: "test -f {{.TALHELPER_OP_ENV_FILE}}" }
      - { msg: "Missing sops config file", sh: "test -f {{.SOPS_CONFIG_FILE}}" }
      - { msg: "Missing sops age.key", sh: "test -f {{.AGE_FILE}}" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
      - { msg: "Missing talhelper env file", sh: "test -f {{.TALHELPER_ENV_FILE}}" }
      - { msg: "Missing talhelper secret file", sh: "test -f {{.TALHELPER_SECRET_FILE}}" }
      - { msg: "1password not signed in", sh: "op user get --me" }

  # task talos:apply-clusterconfig
  apply-clusterconfig:
    desc: Apply clusterconfig for a Talos cluster
    vars:
      CLUSTERCONFIG_FILES:
        sh: ls {{.TALHELPER_CLUSTER_DIR}}/*.yaml
    cmds:
      - for:
          var: CLUSTERCONFIG_FILES
        task: .apply-machineconfig
        vars:
          DRY_RUN: "{{ .DRY_RUN }}"
          FILENAME: "{{.ITEM}}"
          INSECURE: "{{ .INSECURE }}"
          NODE: |-
            {{ trimPrefix (printf "area0-") (base .ITEM) | trimSuffix ".yaml" }}
    preconditions:
      - { msg: "ls not in $PATH", sh: "command -v ls" }

  # task talos:apply-machineconfig NODE=<node_name> [MODE=reboot]
  apply-machineconfig:
    desc: Apply a Talos machineConfig to a single Talos node
    summary: |
      NODE:
      DRY_RUN:
      INSECURE:
      MODE:
    prompt: "Apply machineConfig to Talos node: '{{.NODE}} [ {{.NODE_IP_ADDRESS}} ]' ... continue?"
    requires:
      vars:
        - NODE
    vars:
      NODE_IP_ADDRESS:
        sh: |
          yq '.nodes[] | select(.hostname == "{{.NODE}}") | .ipAddress' {{.TALHELPER_CONFIG_FILE}}
      FILENAME:
        sh: ls {{.TALHELPER_CLUSTER_DIR}}/area0-{{.NODE}}.yaml
    cmds:
      - task: .apply-machineconfig
        vars:
          DRY_RUN: "{{ .DRY_RUN }}"
          FILENAME: "{{.FILENAME}}"
          INSECURE: "{{ .INSECURE }}"
          NODE: |-
            {{ trimPrefix (printf "area0-") (base .NODE) | trimSuffix ".yaml" }}
          MODE: "{{.MODE}}"
      # - talosctl --nodes {{.NODE_IP_ADDRESS}} health
    preconditions:
      - { msg: "talosctl not in $PATH", sh: "command -v talosctl" }
      - { msg: "yq not in $PATH", sh: "command -v yq" }
      - { msg: "Missing machineconfig config file", sh: "test -f {{.TALHELPER_CLUSTER_DIR}}/area0-{{.NODE}}.yaml" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
      - { msg: "Missing talosconfig file", sh: "test -f {{.TALOSCONFIG_FILE}}" }

  # task talos:kubeconfig
  kubeconfig:
    desc: Generate kubeconfig for a Talos cluster
    vars:
      CLUSTER_NAME:
        sh: yq '.context' {{.TALOSCONFIG_FILE}}
      TALOS_CONTROLLER:
        sh: |
          talosctl --talosconfig {{.TALOSCONFIG_FILE}} config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      KUBECONFIG_DIR:
        sh: dirname {{.KUBECONFIG_FILE}}
      TALOS_CLUSTER: '{{.TALOS_CLUSTER | default .CLUSTER_NAME}}'
    cmds:
      - |
        talosctl kubeconfig \
            --nodes {{.TALOS_CONTROLLER}} \
            --force \
            --force-context-name {{.TALOS_CLUSTER}} \
            {{.KUBECONFIG_DIR}}
    preconditions:
      - { msg: "jq not in $PATH", sh: "command -v jq" }
      - { msg: "shuf not in $PATH", sh: "command -v shuf" }
      - { msg: "talosctl not in $PATH", sh: "command -v talosctl" }
      - { msg: "yq not in $PATH", sh: "command -v yq" }
      - { msg: "Missing Talos cluster configuration", sh: "talosctl config info >/dev/null 2>&1" }
      - { msg: "Missing talosconfig file", sh: "test -f {{.TALOSCONFIG_FILE}}" }

  .apply-machineconfig:
    internal: true
    requires:
      vars:
        - FILENAME
        - NODE
    vars:
      MODE: '{{.MODE | default "auto"}}'
      NODE_IP_ADDRESS:
        sh: |
          yq '.nodes[] | select(.hostname == "{{.NODE}}") | .ipAddress' {{.TALHELPER_CONFIG_FILE}}
    cmds:
      - |
        talosctl apply-config \
            --nodes "{{.NODE_IP_ADDRESS}}" \
            {{ if eq "true" .DRY_RUN }}--dry-run{{ end }} \
            --file "{{.FILENAME}}" \
            {{ if eq "true" .INSECURE }}--insecure{{ end }} \
            --mode="{{.MODE}}"
    preconditions:
      - { msg: "talosctl not in $PATH", sh: "command -v talosctl" }
      - { msg: "yq not in $PATH", sh: "command -v yq" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
      - { msg: "Missing talosconfig file", sh: "test -f {{.TALOSCONFIG_FILE}}" }
      - { msg: "Missing Talos cluster configuration", sh: "talosctl config info >/dev/null 2>&1" }
      - { msg: "Missing Talos machineconfig file: {{.FILENAME}}", sh: "test -f {{.FILENAME}}" }
