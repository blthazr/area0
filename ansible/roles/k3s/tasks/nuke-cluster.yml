# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   @file           :   tasks/nuke-cluster.yml
#   @description    :   nuke k3s cluster
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---
- name: nuke-cluster | check for k3s uninstall scripts
  ansible.builtin.stat:
    path: "/usr/local/bin/{{ k3s_uninstall_file }}.sh"
  register: k3s_uninstall_scripts
  loop:
    - k3s-killall
    - k3s-uninstall
    - k3s-agent-uninstall
  loop_control:
    loop_var: k3s_uninstall_file

- name: nuke-cluster | run k3s uninstall scripts
  ansible.builtin.command:
    cmd: "{{ k3s_uninstall_script.stat.path }}"
    removes: "{{ k3s_uninstall_script.stat.path }}"
  loop: "{{ k3s_uninstall_scripts.results }}"
  loop_control:
    loop_var: k3s_uninstall_script
  when:
    - k3s_uninstall_scripts.results is defined
    - k3s_uninstall_scripts.results is iterable
    - k3s_uninstall_scripts.results | length > 0
    - k3s_uninstall_script.stat.exists is defined
    - k3s_uninstall_script.stat.exists

- name: nuke-cluster | check for k3s hard links
  ansible.builtin.stat:
    path: "/usr/local/bin/{{ k3s_uninstall_file }}"
  register: k3s_hard_links
  loop:
    - kubectl
    - crictl
    - ctr
  loop_control:
    loop_var: k3s_uninstall_file

- name: nuke-cluster | remove k3s hard links
  ansible.builtin.file:
    path: "{{ k3s_hard_link.stat.path }}"
    state: absent
  loop: "{{ k3s_hard_links.results }}"
  loop_control:
    loop_var: k3s_hard_link
  when:
    - k3s_uninstall_scripts.results is defined
    - k3s_uninstall_scripts.results is iterable
    - k3s_uninstall_scripts.results | length > 0
    - k3s_hard_link.stat.exists is defined
    - k3s_hard_link.stat.exists

- name: nuke-cluster | k3s-killall.service
  block:
    - name: nuke-cluster | get service facts
      service_facts:

    - name: nuke-cluster | remove k3s-killall.service
      ansible.builtin.file:
        path: /etc/systemd/system/k3s-killall.service
        state: absent
      notify: reload systemd
      when: "'k3s-killall.service' in services"
  when:
    - k3s_killall_service is defined
    - k3s_killall_service

- name: nuke-cluster | check if cni files exist
  ansible.builtin.stat:
    path: "/etc/cni/net.d"
  register: cli_files_path

- name: nuke-cluster | get list of cni files to delete
  ansible.builtin.find:
    paths: "/etc/cni/net.d"
    patterns: "*"
    hidden: true
  register: cni_files_to_delete
  when:
    - cli_files_path.stat.exists

- name: nuke-cluster | delete cni files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ cni_files_to_delete.files }}"
  when:
    - cni_files_to_delete.files is defined
    - cni_files_to_delete.files is iterable
    - cni_files_to_delete.files | length > 0

- name: nuke-cluster | kubeconfig
  block:
    - name: kubeconfig | change the k3s_context
      ansible.builtin.shell:
        cmd: 'KUBECONFIG=~/.kube/config kubectl config use-context "{{ default_k3s_context | default(''docker-desktop'') }}"'

    - name: kubeconfig | remove cluster from kubeconfig
      ansible.builtin.shell:
        cmd: 'KUBECONFIG=~/.kube/config kubectl config delete-cluster "{{ k3s_context }}"'

    - name: kubeconfig | remove context from kubeconfig
      ansible.builtin.shell:
        cmd: 'KUBECONFIG=~/.kube/config kubectl config delete-context "{{ k3s_context }}"'

    - name: kubeconfig | remove user from kubeconfig
      ansible.builtin.shell:
        cmd: 'KUBECONFIG=~/.kube/config kubectl config delete-user "{{ k3s_context }}"'

  become: false
  delegate_to: localhost
  ignore_errors: true
  run_once: true

- name: nuke-cluster | reboot
  ansible.builtin.reboot:
  when:
    - reboot_after_k3s_uninstall is defined
    - reboot_after_k3s_uninstall
