# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   @file           :   playbooks/kubernetes/flux-bootstrap.yml
#   @description    :   bootstrap new flux gitops toolkit deployment
#   @usage          :   ansible-playbook playbooks/kubernetes/flux-bootstrap.yml
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---
- hosts:
    - kubernetes
  become: true
  gather_facts: true

  vars:
    flux_repo_branch: main
    flux_repo_owner: christopherburnham
    flux_repo_path: ./k8s/cluster/base
    github_repo: area0
    kubeconfig: "{{ local_repo_path }}/kubeconfig"

  tasks:
    - block:
        - name: load sops encrypted variables
          community.sops.load_vars:
            file: flux.sops.yml

        - name: get local repo path
          ansible.builtin.shell:
            cmd: "git rev-parse --show-toplevel"
          register: local_repo_path

        - ansible.builtin.set_fact:
            local_repo_path: "{{ local_repo_path.stdout }}"

        - name: check for required variables
          ansible.builtin.assert:
            that:
              - "{{ item }} is defined"
              - "{{ item }} | length > 0"
            fail_msg: "Required variable '{{ item }}' is not defined"
          loop:
            - flux_author_email
            - flux_author_name
            - flux_repo_branch
            - flux_repo_owner
            - flux_repo_path
            - github_repo
            - github_token
            - kubeconfig
            - sops_private_key

        - name: get cluster information
          kubernetes.core.k8s_cluster_info:
            kubeconfig: "{{ kubeconfig }}"
          register: cluster_api_status

        - ansible.builtin.fail:
            msg: "{{ cluster_api_status }}"
          when:
            - cluster_api_status.failed != false

        - name: run flux pre-check
          ansible.builtin.shell:
            cmd: flux --kubeconfig "{{ kubeconfig }}" check --pre
          register: flux_pre

        - ansible.builtin.fail:
            msg: "{{ flux_pre }}"
          when:
            - '"prerequisites checks passed" not in flux_pre.stderr'

        - name: create the flux-system namespace
          kubernetes.core.k8s:
            api_version: v1
            kubeconfig: "{{ kubeconfig }}"
            kind: Namespace
            name: flux-system
            state: present

        - name: check for existing sops-age secret
          kubernetes.core.k8s_info:
            kubeconfig: "{{ kubeconfig }}"
            kind: Secret
            namespace: flux-system
            name: sops-age
          register: sops_secret

        - name: delete existing sops-age secret
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig }}"
            state: absent
            api_version: v1
            kind: Secret
            namespace: flux-system
            name: sops-age
          when:
            - sops_secret.resources | length > 0

        - name: create sops-age secret
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig }}"
            resource_definition:
              apiVersion: v1
              data:
                age.agekey: "{{ sops_private_key | string | b64encode }}"
              kind: Secret
              metadata:
                name: sops-age
                namespace: flux-system
              type: Opaque

        - name: bootstrap flux
          ansible.builtin.shell:
            cmd: |
              flux bootstrap github \
              --author-email="{{ flux_author_email }}" \
              --author-name="{{ flux_author_name }}" \
              --branch="{{ flux_repo_branch }}" \
              --owner="{{ flux_repo_owner }}" \
              --path="{{ flux_repo_path }}" \
              --personal=true \
              --private=false \
              --repository="{{ github_repo }}"
          environment:
            GITHUB_TOKEN: "{{ github_token }}"
            KUBECONFIG: "{{ kubeconfig }}"

      become: false
      delegate_to: localhost
      run_once: true
