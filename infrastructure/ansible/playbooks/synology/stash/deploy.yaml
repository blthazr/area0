# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   @file           :   playbooks/synologystash/deploy.yaml
#   @description    :   deploy stash for synology nas
#   @usage          :   ansible-playbook playbooks/synology/stash/deploy.yaml
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---
- name: Deploy Stash
  hosts:
    - synology
  become: true
  gather_facts: true

  environment:
    PATH: /sbin:/bin:/usr/sbin:/usr/bin:/usr/syno/sbin:/usr/syno/bin:/usr/local/sbin:/usr/local/bin

  vars:
    docker_compose_definition:
      services:
        stash:
          container_name: stash
          environment:
            STASH_CACHE: "/cache/"
            STASH_GENERATED: "/generated/"
            STASH_STASH: "/media/"
            STASH_METADATA: "/metadata/"
          hostname: stash
          image: stashapp/stash:latest
          labels:
            - "com.centurylinklabs.watchtower.enable=true"
          ports:
            - 9999:9999
          restart: unless-stopped
          security_opt:
            - "no-new-privileges:true"
          volumes:
            - /etc/localtime:/etc/localtime:ro
            - /volume1/stash/config:/root/.stash
            - /volume1/stash/data/cache:/cache
            - /volume1/stash/data/generated:/generated
            - /volume1/stash/data/media:/media
            - /volume1/stash/data/metadata:/metadata
    project_name: stash

  tasks:
    - name: Remove existing services
      community.docker.docker_compose_v2:
        project_name: "{{ project_name }}"
        definition: "{{ docker_compose_definition }}"
        state: absent

    - name: Create and start services
      community.docker.docker_compose_v2:
        project_name: "{{ project_name }}"
        definition: "{{ docker_compose_definition }}"
        pull: always
        state: present
        recreate: always
      register: output

    - name: Assert servcies are running
      ansible.builtin.assert:
        that:
          - container.State == 'running'
        success_msg: "Running {{ container.Service }}"
      loop: "{{ output.containers }}"
      loop_control:
        loop_var: container
